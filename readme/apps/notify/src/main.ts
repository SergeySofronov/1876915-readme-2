import { Logger, ValidationPipe } from '@nestjs/common';
import { ConfigService } from '@nestjs/config';
import { NestFactory } from '@nestjs/core';
import { AppModule } from './app/app.module';
import { getRabbitMqConfig } from './app/config/rabbitmq.config';

// –ö–∞–∫ —è –ø–æ–Ω—è–ª, –¥–ª—è RabbitMQ –Ω–µ—Ç –º–æ–¥—É–ª—è –¥–ª—è nest (—Ç–∏–ø–∞ @nestjs/rabbitmq)),
// –ø–æ—ç—Ç–æ–º—É –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç—Å—è —á–µ—Ä–µ–∑ connectMicroservice() –∏–ª–∏ createMicroservice()

async function bootstrap() {
  const app = await NestFactory.create(AppModule);

  const configService = app.get<ConfigService>(ConfigService);
  app.connectMicroservice(getRabbitMqConfig(configService));

  await app.startAllMicroservices();
  Logger.log(`üöÄ Notify service is running on`);

  const globalPrefix = 'notify';
  app.setGlobalPrefix(globalPrefix);

  app.useGlobalPipes(new ValidationPipe({ transform: true }));

  const port = process.env.PORT || 3335;
  await app.listen(port);

  Logger.log(
    `üöÄ REST is running on: http://localhost:${port}/${globalPrefix}`
  );
}

bootstrap();
